#summary Create a simple OpenURL resolver for your library
#labels openurl,openurlresolver,libraries

Librarians use blogs and other social software tools to promote their collections. Where it is possible, librarians seek to link web pages to their catalogue records so that patrons can check availability and check out items. Unfortunately, the average library catalogue makes it difficult to achieve this kind of linking.

OpenURL is a technology for linking web users to library catalogue resources. It was first developed by Herbert van de Sompel and Patrick Hochstenbach as a method to provide links from citations to a libraryâ€™s electronic journal articles. It has since been generalized for other applications and published as the standard, ANSI/NISO Z39.88.

Many academic libraries have adopted OpenURL, but few public libraries are exploring its possibilities. Those few public libraries that have implemented OpenURL are using it for electronic articles, not books or other items. This lack of exploration is likely due to unfamiliarity with OpenURL or concerns that the technology is too complex and costly. While it is possible to purchase OpenURL products, and worthwhile to research open source options, this article shows how to 'roll your own' simple OpenURL resolver for a public library at no cost. It is a good place to start.

<strong>COinS, OpenURL Links, OpenURL Resolver</strong>

Three things are required for implementing OpenURL: a !ContextObject with metadata (COinS), an OpenURL link, and an OpenURL resolver. COinS is a standard for embedding bibliographic metadata in a hidden HTML span element. It is a bit of invisible HTML containing data such as ISBN, title, author, etc. An OpenURL link is a visible hyperlink containing the COinS and a pointer to an OpenURL resolver. The resolver is a server page with script that reads the COinS data and searches for the work in the library catalogue.

This article describes how to build the resolver, but you can build COinS by using the <a href="http://generator.ocoins.info/">OCLC online generator</a> or by following the rules laid out at <a href="http://ocoins.info/">http://ocoins.info/</a>. Instructions are also <a href="http://www.ocoins.info/latent.html">provided</a> for using COinS with OpenURL links. See the Resources section at the end of this article for more information.

<strong>Building an OpenURL 1.0 Resolver</strong>

The OpenURL resolver shown below required only 6 lines of PHP code. Resolving a request for ISBNs alone could be implemented in 5 lines of code, but I wanted an extra line to resolve requests by title and author when an ISBN was not available. Most resolvers are longer than 6 lines because they have more functionality. I just wanted to show that resolvers are not complicated things.

There are other nice examples of 'homegrown' resolvers on the web, but the ones I found are for the older OpenURL version 0.1 (see Resources). The code in this article may be the first example of a simple resolver for OpenURL version 1.0 (if not, please leave a comment).

The target catalogue is at London Public Library (LPL) where I am a patron. There are thousands of different catalogue designs, but many follow this general pattern. Even where catalogues vary in design, the OpenURL resolver only has to be built once to fit its library's particular pattern.

<code>1.  ob_start();</code>

<code>2.  $qs = str_replace('rft.', 'rft_', ${{{_}}}SERVER{{{['QUERY_STRING']}}} );</code>

<code>3.  parse_str($qs);</code>

<code>4.  if ($rft_isbn != '') $url = 'http://catalogue.londonpubliclibrary.ca/search/?searchtype=i&searcharg=' . $rft_isbn . '&searchscope=20&SORT=D';</code>

<code>5.  else $url = 'http://catalogue.londonpubliclibrary.ca/search/X?SEARCH=t:(' . $rft_btitle . ')+and+a:(' . $rft_au . ')&SORT=D';</code>

<code>6.  header("Location: $url");</code>

Line 1. Some resolvers provide a list of options to the user, especially if a resource cannot be found. For this simple resolver, the user is transferred to a search page for the item. If the resource is not found, the user can modify the search page to look again. This line of code uses a PHP function to buffer the display until the search page is displayed. 

Line 2. The resolver extracts the bibliographic data from the COinS elements in the query string of the OpenURL link. A simple replacement is performed to aid extraction. 

Line 3. The PHP 'parse_str' function is a tidy way of parsing the querystring into variables. The ISBN, title, and author are extracted as $rft_isbn, $rft_btitle and $rft_au. Additional data is available, including the OpenURL version. The code could be branched at this point to also handle the older version 0.1.

Lines 4-5. If an ISBN is available, a url is constructed for searching the London Public Library by ISBN, otherwise a url is constructed for a title-author search. Either URL has standard appendages, e.g., SORT=D for sorting results in descending order. This format was scooped from the address bar after performing a manual search at the library's website.

Line 6. The user is transferred to the search page defined by the url.

<strong>Using the Resolver with !OpenBook !WordPress Plugin</strong>

Once a library has an OpenURL resolver, a librarian may still find it daunting to create COinS and OpenURL links. Many libraries use !WordPress in their social software toolkit. If so, they can use version 2 of the <a href="http://!WordPress.org/extend/plugins/!OpenBook-book-data/">!OpenBook !WordPress plugin</a> to automate the generation of the OpenURL components. A librarian inserts an !OpenBook 'shortcode' with an ISBN or other book number in a !WordPress post, page or widget. The plugin formats bibliographic data from Open Library into a custom text or image link. The plugin formats the link with COinS data and points it to a configured OpenURL resolver. 

A library does not have to use !WordPress or !OpenBook to make these links. This manual link to <a href="http://openbooklab/_scripts/simpleopenurlresolver.php?url_ver=Z39.88-2004&rft_val_fmt=info%3Aofi%2Ffmt%3Akev%3Amtx%3Abook&rft.btitle=White+noise&rft.au=Don+DeLillo&rft.place=%5BNew+York%5D&rft.pub=Penguin+Books&rft.date=1986&rft.tpages=3268">White Noise</a> has no ISBN and demonstrates resolution through the title-author search. Creating manual links in this way is possible, but some kind of auto-generation like the !OpenBook method is more practical. 

<strong>Conclusion</strong>

Six lines of code makes for a very simple OpenURL resolver, but even this simple resolver is a step ahead of basic HTML links that might otherwise be used. The resolver provides the additional functionality of a title-author search option when an ISBN is not available, and additional search options can be added. The resolver also provides a single point of access for easily managing changes to the search interface and for logging. It is hoped that this demonstration encourages people in public libraries to experiment with OpenURL technology.

<strong>Resources</strong>

Dahl, Mark (February 1, 2004). Building an OpenURL resolver in your own workshop; the simple nature of the OpenURL standard compelled me to take a whack at building an OpenURL resolver on my own. <em>Computers in Libraries</em>.  Article on building an OpenURL 0.1 resolver available through a library or free subscription. See <a href="http://www.accessmylibrary.com/coms2/summary_0286-20361946_ITM">http://www.accessmylibrary.com/coms2/summary_0286-20361946_ITM</a>.

Hellman, Eric (2009). OpenURL COinS: A Convention to Embed Bibliographic Metadata in HTML. <a href="http://ocoins.info/">http://ocoins.info/</a>.

Miedema, John (2009). !OpenBook !WordPress Plugin: Linking to Library Records with OpenURL. <em>Information Standards Quarterly</em>, 21(2), p. 13-16. You can download the PDF at <a href="http://pubs.johnmiedema.ca/2009/07/06/openbook-article-in-nisos-information-standards-quarterly-magazine/">http://pubs.johnmiedema.ca/2009/07/06/openbook-article-in-nisos-information-standards-quarterly-magazine/</a>.

OCLC (2008). COinS Generator. <a href="http://generator.ocoins.info/">http://generator.ocoins.info/</a>.

Pope Robbins, Laura (2006). Creating an OpenURL resolver. <em>OCLC Systems & Services, 22</em>(2), pp. 115-121. Implementation of a OpenURL 0.1 resolver at Dowling College. <a href="http://www.emeraldinsight.com/Insight/ViewContentServlet?Filename=Published/EmeraldFullTextArticle/Articles/1640220208.html">http://www.emeraldinsight.com/Insight/ViewContentServlet?Filename=Published/EmeraldFullTextArticle/Articles/1640220208.html</a>.

Powell, Andy (June 22, 2001). OpenResolver: a Simple OpenURL Resolver. <em>Ariadne, 28</em>. <a href="http://www.ariadne.ac.uk/issue28/resolver/">http://www.ariadne.ac.uk/issue28/resolver/</a>.

Scott, Dan (2009). SFX target parser for Evergreen and some thoughts about searching identifiers. <em>Coffee|Code : Dan Scott</em>. <a href="http://coffeecode.net/archives/194-guid.html">http://coffeecode.net/archives/194-guid.html</a>.

Wikipedia (2009). OpenURL. <a href="http://en.wikipedia.org/wiki/OpenURL">http://en.wikipedia.org/wiki/OpenURL</a>.